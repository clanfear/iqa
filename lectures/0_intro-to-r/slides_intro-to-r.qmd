---
title: "Introduction to R"
subtitle: "IQA Lecture 0"
author: "Charles Lanfear"
date: "6 Oct 2022<br>Updated: `r gsub(' 0', ' ', format(Sys.Date(), format='%d %b %Y'))`"
format: 
  revealjs:
    theme: [serif, "../assets/cam_style.scss"]
    incremental: false
    highlight-style: atom-one-dark
knitr:
  opts_chunk: 
    echo: true
    warning: true
    message: true
    comment: "##"
editor: visual
---

## Test slide

```{r}
#| eval: false
#| echo: true
# Comment
example <- function(x){TRUE}
5 * 7
c("Ham")
```

How hard is it to read `inline code` in this theme?

What do **bold** and *italic* look like? [Blink?]{.blink}

### Triple hash?

## Course Goals

::: incremental
-   Cultivate basic competence with applied statistics

    -   *We'll start this next week*

-   Develop intermediate data management and visualization skills in R

    -   *We'll start this today*

-   Prepare you for advanced topics in quantitative analysis

-   Introduce reproducible research practices
:::

# Why are you doing this to me?

## Reasons

. . .

#### You *will* read quantitative research

* Interpretation
* Evaluation

. . .

#### You *may* do quantitative research

* Analysis
* Reporting


## Okay, but programming?

-   Necessary for any real data analysis

-   *90% of data analysis is **cleaning***

-   Cleaning data by hand is:

    -   Error prone
    -   Time consuming
    -   Not **reproducible**

-   Programming opens *many* doors

## Logistics

Lecture: B11, Wed, 14:00-16:00

My email: [cl948\@cam.ac.uk]()

Drop-in times:

-   3.9, Tue, 14:00-15:00
-   3.9, Wed, 11:00-12:00

Materials: [http://clanfear.github.io/IQA]()

## Materials

All course materials are on the course website. This includes:

-   These slides and the code used to generate them.
-   An R script for the slides to follow along in class.
-   Useful links to other resources.
-   **Formative assignments**

If something doesn't work, email me.

## A Note on Slide Formatting

**Bold** is an important term.

. . .

*Italics* are emphasis or mouse-click instructions, e.g. "Click *File \> Print*"

. . .

`Code` is R code you type in or keystrokes for actions, e.g.: "Press `Ctrl-P` to open the print dialogue."

. . .

Code chunks are *actual embedded R code*.

```{r}
#| code-line-numbers: "1|2"
# Sometimes important stuff is highlighted!
7 * 49
```

. . .

`##` indicates the output from running the code chunk.

# R and RStudio

## Why R?

R is a programming language built for statistical computing.

If one already knows Excel, SPSS, or Stata, why use R?

::: incremental
-   R is *free*, so you don't need a terminal server or license.

-   R has a *very* large community for support and packages.

-   R can handle virtually any data format.

-   R makes replication *easy*.

-   R is a *language* so it can do *everything*.[^1]

-   R is similar to other programming languages.
:::

[^1]: Including generate these slides (using Quarto)!

## R Studio

R Studio is a "front-end" or integrated development environment (IDE) for R that can make your life *easier*.

--

## We'll show RStudio can...

-   Organize your code, output, and plots

--

-   Auto-complete code and highlight syntax

--

-   Help view data and objects

--

-   Enable easy integration of R code into documents with **R Markdown**

--

It can also...

-   Manage `git` repositories

-   Run interactive tutorials

-   Handle other languages like Python, SQL, and HTML

## Selling you on R Markdown

## The ability to create R Markdown files is a powerful advantage of R:

-   Document analyses by combining text, code, and output

--

-   

    ## No copying and pasting into Word

-   

    ## Easy for collaborators to understand

-   Show as little or as much code as you want

--

-   Produce many different document types as output

--

-   PDF documents
-   HTML webpages and reports
-   Word and PowerPoint documents\
-   Presentations (like these slides)

--

-   Works with LaTeX and HTML for math and more formatting control

--

We'll get back to this shortly!

## Getting Started

Open up RStudio now and choose *File \> New File \> R Script*.

Then, let's get oriented with the interface:

-   *Top Left*: Code **editor** pane, data viewer (browse with tabs)

-   *Bottom Left*: **Console** for running code (`>` prompt)

-   *Top Right*: List of objects in **environment**, code **history** tab.

-   *Bottom Right*: Tabs for browsing files, viewing plots, managing packages, and viewing help files.

You can change the layout in *Preferences \> Pane Layout*

## Editing and Running Code

There are several ways to run R code in RStudio:

-   Highlight lines in the **editor** window and click *Run* at the top or hit `Ctrl+Enter` or `⌘+Enter` to run them all.

-   With your **caret** on a line you want to run, hit `Ctrl+Enter` or `⌘+Enter`. Note your caret moves to the next line, so you can run code sequentially with repeated presses.

-   Type individual lines in the **console** and press `Enter`.

The console will show the lines you ran followed by any printed output.

This thing is the caret: [`|`]{.blink_me}

## Incomplete Code

If you mess up (e.g. leave off a parenthesis), R might show a `+` sign prompting you to finish the command:

```{r Coding 1, eval=FALSE}
> (11-2
+
```

Finish the command or hit `Esc` to get out of this.

## R as a Calculator

In the **console**, type `123 + 456 + 789` and hit `Enter`.

. . .

```{r Calc 1}
123 + 456 + 789
```

. . .

The `[1]` in the output indicates the numeric **index** of the first element on that line.

. . .

Now in your blank R document in the **editor**, try typing the line `sqrt(400)` and either clicking *Run* or hitting `Ctrl+Enter` or `⌘+Enter`.

. . .

```{r Calc 2}
sqrt(400)
```

## Functions and Help

`sqrt()` is an example of a **function** in R.

If we didn't have a good guess as to what `sqrt()` will do, we can type `?sqrt` in the console and look at the **Help** panel on the right.

```{r Help, eval=FALSE}
?sqrt
```

**Arguments** are the *inputs* to a function. In this case, the only argument to `sqrt()` is `x` which can be a number or a vector of numbers.

Help files provide documentation on how to use functions and what functions produce.

## Creating Objects

R stores *everything* as an **object**, including data, functions, models, and output.

. . .

Creating an object can be done using the **assignment operator**: `<-`

. . .

```{r Objects 1}
new.object <- 144
```

. . .

**Operators** like `<-` are functions that look like symbols but typically sit between their arguments (e.g. numbers or objects) instead of having them inside `()` like in `sqrt(x)`.[^2]

[^2]: We can actually call operators like other functions by stuffing them between backticks: <code>\`+\`(x,y)</code>

. . .

We do math with operators, e.g., `x + y`. `+` is the addition operator!

## Calling Objects

You can display or "call" an object simply by using its name.

```{r Objects 2}
new.object
```

. . .

Object names can contain `_` and `.` in them, but cannot *begin* with numbers. Try to be consistent in naming objects. RStudio auto-complete means *long names are better than vague ones*!

*Good names*[^3] save confusion later.

[^3]: *"There are only two hard things in Computer Science: cache invalidation and naming things." - Phil Karlton*

## Using Objects

An object's **name** represents the information stored in that **object**, so you can treat the object's name as if it were the values stored inside.

. . .

```{r Objects 3}
new.object + 10
new.object + new.object
sqrt(new.object)
```

## Creating Vectors

A **vector** is a series of **elements**, such as numbers.

. . .

You can create a vector and store it as an object in the same way. To do this, use the function `c()` which stands for "combine" or "concatenate".

. . .

```{r Vectors 1}
new.object <- c(4, 9, 16, 25, 36)
new.object
```

. . .

If you name an object the same name as an existing object, *it will overwrite it*.

. . .

You can provide a vector as an argument for many functions.

. . .

```{r Vectors 2}
sqrt(new.object)
```

## More Complex Objects

The same principles can be used to create more complex objects like **matrices**, **arrays**, **lists**, and **dataframes** (lists which look like matrices but can hold multiple data types at once).

Most data sets you will work with will be read into R and stored as a **dataframe**, so this course will mainly focus on manipulating and visualizing these objects.

Before we get into these, let's revisit R Markdown.

# R Markdown

## R Markdown Documents

Let's try making an R Markdown file:

1.  Choose *File \> New File \> R Markdown...*
2.  Make sure *HTML Output* is selected and click OK
3.  Save the file somewhere, call it `my_first_rmd.Rmd`
4.  Click the *Knit HTML* button
5.  Watch the progress in the R Markdown pane, then gaze upon your result!

You may also open up the file in your computer's browser if you so desire, using the *Open in Browser* button at the top of the preview window.

# R Markdown Headers

The header of an .Rmd file is a [YAML](http://yaml.org/) code block, and everything else is part of the main document.

. . .

    ---
    title: "Untitled"
    author: "Charles Lanfear"
    date: "March 28, 2018"
    output: html_document
    ---

. . .

To mess with global formatting, [you can modify the header](http://rmarkdown.rstudio.com/html_document_format.html).[^4]

[^4]: Be careful though, YAML is space-sensitive; indents matter!

    output: html_document: theme: readable

## R Markdown Syntax

::: columns
::: {.column width="50%"}
## Output

**bold/strong emphasis**

*italic/normal emphasis*

# Header

## Subheader

### Subsubheader

> Block quote from famous person
:::

::: {.column width="50%"}
## Syntax

```{=html}
<pre>
**bold/strong emphasis**

*italic/normal emphasis*


# Header


## Subheader

### Subsubheader

> Block quote from
> famous person
</pre>
```
:::
:::

## More R Markdown Syntax

::: columns
::: {.column width="50%"}
## Output

1.  Ordered lists
2.  Are real easy
3.  Even with sublists
4.  Or when lazy with numbering

-   Unordered lists
-   Are also real easy
    -   Also even with sublists

[URLs are trivial](http://www.uw.edu)

![pictures too](http://depts.washington.edu/uwcreate/img/UW_W-Logo_smallRGB.gif)
:::

::: {.column width="50%"}
## Syntax

```{=html}
<pre>
1. Ordered lists
1. Are real easy
  1. Even with sublists
  1. Or when lazy with numbering


* Unordered lists
* Are also real easy
  + Also even with sublists

[URLs are trivial](http://www.uw.edu)

![pictures too](http://depts.washington.edu/uwcreate/img/UW_W-Logo_smallRGB.gif)
</pre>
```
:::
:::

## Formulae and Syntax

:::: {.columns} ::: {.column width="50%"}

### Output

You can put some math $y= \left( \frac{2}{3} \right)^2$ right up in there.

$$\frac{1}{n} \sum_{i=1}^{n} x_i = \bar{x}_n$$

Or a sentence with `code-looking font`.

Or a block of code:

<pre>

y \<- 1:5 z \<- y\^2

<pre>

:::

::: {.column width="50%"}
## Syntax

```{=html}
<pre>
You can put some math $y= \left(
\frac{2}{3} \right)^2$ right up in 
there

$$\frac{1}{n} \sum_{i=1}^{n}
x_i = \bar{x}_n$$

Or a sentence with `code-looking font`.

Or a block of code:

    ```
    y <- 1:5
    z <- y^2
    ```
</pre>
```
:::

::::

## R Markdown Tinkering

R Markdown docs can be modified in many ways. Visit these links for more information.

-   [Ways to modify the overall document appearance](http://rmarkdown.rstudio.com/html_document_format.html)
-   [Ways to format parts of your document](http://rmarkdown.rstudio.com/authoring_basics.html)
-   [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)

## Formatting Caveats

To keep Quarto dead-simple, it lacks some features you might occasionally want to use. Your options for fancier documents are:

-   Templates
-   Use HTML with CSS for custom formatting[^5]
-   Use custom \LaTeX templates[^6]

[^5]: These slides were created using using custom CSS with Reveal.js

[^6]: Here be dragons! LaTeX is powerful but exacts a terrible price

For day-to-day use, plain vanilla R Markdown does the job.

For handouts, memos, and homeworks, default R Markdown PDFs look surprisingly good!

.footnote\[ \[1\] .\]
